using Editor.Assets;

namespace FUCKSHIT.Editor;

public static class CodeGenerator
{
	private static async void Generate()
	{
		var outputDirectory = Path.Combine( Project.Current.GetCodePath(), "Generated" );
		var outputPath = Path.Combine( outputDirectory, $"Items.generated.cs" );

		var stream = default( Stream );
		try
		{
			if ( !Directory.Exists( outputDirectory ) )
				Directory.CreateDirectory( outputDirectory );

			stream = File.Open( outputPath, FileMode.Create );
		}
		catch ( Exception e )
		{
			Log.Error( e, $"Failed to open {outputPath} for writing" );
			return;
		}

		using var writer = new IndentedTextWriter( new StreamWriter( stream ), "\t" );

		await writer.WriteLineAsync( "// <auto-generated/>" );
		await writer.WriteLineAsync();
		await writer.WriteLineAsync( "namespace FUCKSHIT;" );
		await writer.WriteLineAsync();
		await writer.WriteLineAsync( "public static class Items {" );

		PrefabLibrary.Initialize();
		var items = PrefabLibrary.FindByComponent<Item>();
		foreach ( var obj in items )
		{
			if ( !obj.IsValid() )
				continue;

			var item = obj.Components.Get<Item>( FindMode.InSelf );
			if ( !item.IsValid() )
				continue;

			var index = items.IndexOf( obj );
			var name = item.Name;
			name = name.Replace( ' ', '_' ).ToUpper();
			name = Regex.Replace( name, @"[<>:""/\\|?*']", "" );

			var source = (obj as PrefabScene)?.Source?.ResourcePath ?? "unknown";
			await writer.WriteLineAsync( $"\t/// <summary>{source} <para>{item.Name}</para></summary>" );
			await writer.WriteLineAsync( $"\tpublic const int {name} = {index};" );
		}

		await writer.WriteLineAsync( "}" );

		writer.Close();
	}


	[Event( "scene.saved" )]
	private static void OnSceneSaved( Scene scene )
	{
		if ( scene is not PrefabScene prefab )
			return;

		var item = prefab.Components.Get<Item>( FindMode.EverythingInSelfAndChildren );
		if ( !item.IsValid() )
			return;

		Generate();
	}
}
