﻿@namespace FUCKSHIT.UI
@inherits ScenePanel

<root />

@code {
	private Character Character => Character.Local;

	private SceneModel SceneModel { get; set; }
	private SceneModel DummyModel { get; set; }

	private SceneDirectionalLight Sun { get; set; }
	private SceneLight Light { get; set; }

	private bool _isDragging;
	private float _yaw;

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		World ??= new();
		Camera.FieldOfView = 50;
		Camera.OnRenderOverlay = OnRenderOverlay;
		SetupLighting();
	}

	private void OnRenderOverlay()
	{
		var material = Material.FromShader( "shaders/character_view.shader" );
		var attributes = Camera.Attributes;

		using var rt = RenderTarget.GetTemporary( 1, ImageFormat.Default );
		Graphics.RenderTarget = rt;
		Graphics.Clear( Color.Black, clearColor: false );
		{
			DummyModel.SetBodyGroup( "head", 0 ); // todo
			DummyModel.SetBodyGroup( "torso", 1 );
			DummyModel.SetBodyGroup( "legs", 1 );
			DummyModel.SetBodyGroup( "feet", 1 );
			DummyModel.SetBodyGroup( "hands", 1 );
			DummyModel.Morphs.Set( "fat", Character.Fatness );

			Graphics.Render( DummyModel );
		}
		Graphics.RenderTarget = null;

		attributes.Set( "HoverTexture", rt.ColorTarget );

		Graphics.GrabFrameTexture( "ColorTexture", attributes );
		Graphics.Blit( material, attributes );
	}

	private void SetupLighting()
	{
		if ( !World.IsValid() ) return;

		Sun ??= new SceneDirectionalLight( World, Rotation.From( -45, -45, 0 ), Color.White );

		Light ??= new SceneLight( World, 0, 500f, Color.White * 2f );
		Light.Position = Camera.Position + Camera.Rotation.Forward * 10f;
	}

	public void UpdateAppearance()
	{
		const string CHAR_PATH = "models/guy/guy.vmdl";
		SceneModel ??= new SceneModel( World, CHAR_PATH, global::Transform.Zero );
		DummyModel ??= new SceneModel( World, CHAR_PATH, global::Transform.Zero );
		DummyModel.RenderingEnabled = false;

		Update();
	}

	private void Update()
	{
		if ( SceneModel is null || DummyModel is null )
			return;

		var mousePos = MousePosition;
		var headPos = Camera.ToScreen( (SceneModel.GetAttachment( "eyes", false ) ?? Transform.Zero).Position );
		var localPos = mousePos - headPos;

		/*if ( _isDragging )
			_yaw += Mouse.Delta.x * 0.20f;*/

		var lookat = new Vector3( 1000f, localPos.x, -localPos.y ) * SceneModel.Rotation.Inverse;
		SetAnimParameter( "lookat", lookat );
		
		SetAnimParameter( "height", Character.Height );
		SetAnimParameter( "weight", Character.Fatness );

		SceneModel.Morphs.Set( "fat", Character.Fatness );

		// SceneModel.Rotation = Rotation.From( 0, _yaw, 0 );
		SceneModel.Update( RealTime.Delta );
		DummyModel.Update( RealTime.Delta );
	}

	private void SetAnimParameter( string name, Vector3 value )
	{
		SceneModel.SetAnimParameter( name, value );
		DummyModel.SetAnimParameter( name, value );
	}

	private void SetAnimParameter( string name, float value )
	{
		SceneModel.SetAnimParameter( name, value );
		DummyModel.SetAnimParameter( name, value );
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		if ( e.Button == "mouseleft" )
			_isDragging = e.Pressed;

		base.OnButtonEvent( e );
	}

	public override void Tick()
	{
		if ( !Character.IsValid() )
			return;

		if ( SceneModel is null )
			UpdateAppearance();

		Update();

		var transform = Camera.FitModel( SceneModel );
		Camera.Position = transform.Position;
		Camera.Rotation = transform.Rotation;

		SetupLighting();
	}
}
