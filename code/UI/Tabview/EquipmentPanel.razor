@namespace FUCKSHIT.UI
@inherits DragDropTarget

<root class="@(Slot.IsHandSlot() ? "long" : "")" style="left: @(GetSlotOffset().x * 100f)%; top: @(GetSlotOffset().y * 100f)%;">
	<div class="title header-bg">@Slot</div>
	<div class="slot">
		<div class="container inner-border">
			@if ( Equipment.IsValid() )
			{
				<ItemPanel 
					Item=@Equipment 
					Static=@true 
					Source=@Character 
					Container=@Container
				/>
			}
		</div>
	</div>
</root>

@code {
	public EquipmentSlot Slot { get; set; }
	public ContainerDisplay Container { get; set; }

	private Character Character => Character.Local;
	private Item Equipment 
	{
		get 
		{
			if ( Character.IsValid() && Character.Equipment.TryGetValue( Slot, out var item ) )
				return item;

			return null;
		}
	}

	private Vector2 GetSlotOffset()
		=> Slot switch 
		{
			EquipmentSlot.Headwear => new Vector2( 0.38f, 0.03f ),
			EquipmentSlot.Face => new Vector2( 0.68f, 0.03f ),
			EquipmentSlot.Body => new Vector2( 0.38f, 0.23f ),
			EquipmentSlot.Gear => new Vector2( 0.08f, 0.23f ),
			EquipmentSlot.Legs => new Vector2( 0.38f, 0.43f ),
			EquipmentSlot.Primary => new Vector2( 0.13f, 0.63f ),
			EquipmentSlot.Secondary => new Vector2( 0.13f, 0.81f ),
			_ => Vector2.One,
		};

	public override void OnDropped( Item item, bool rotated, object source )
	{
		if ( source is not Container container )
			return;

		if ( !Character.IsValid() )
			return;
		
		if ( item.IsEquipment && Equipment is null )
			Character.TryEquip( item, Slot );
	}

	protected override int BuildHash() 
		=> HashCode.Combine( Slot, Equipment );
}
