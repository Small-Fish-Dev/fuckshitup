@namespace FUCKSHIT.UI
@inherits Panel

@{
	var size = DragItemPanel.Instance?.Size ?? 0;
	var position = Container.HoveredPosition;
	var item = DragItemPanel.Instance?.Item;

	if ( Visible )
	{
		// This method is very expensive and gets heavy fast if you run it lots, so we run it when the state is changed B)
		CanFit = IsValidPlacement( position, size, item, out var state ); 
		// TODO: effects depending on state
	}

	<root 
		class="@(Visible ? "visible" : "") @(CanFit ? "valid" : "")"
		style="left: @(position.x * GRID_SIZE - 1)px; top: @(position.y * GRID_SIZE - 1)px;
			   width: @(size.x * GRID_SIZE - 1)px; height: @(size.y * GRID_SIZE - 1)px;"
	/>
}

@code {
	private const float GRID_SIZE = SlotCollectionDisplay.GRID_SIZE;

	public ContainerDisplay Container { get; set; }
	public ContainerBox Box { get; set; }

	private bool CanFit { get; set; }
	private bool Visible => Container?.HoveredBox == Box && DragItemPanel.Instance is not null;

	private bool IsValidPlacement( Vector2Int position, Vector2Int size, Item item, out (bool merged, bool inserted) state )
	{
		state = (false, false);

		if ( !item.IsValid() ) return false;
		if ( item == Container.HoveredCollection?.Source ) return false;

		var passFilter = Container.HoveredCollection?.PassesFilter( item ) ?? true;
		if ( !passFilter ) return false;

		var fit = Container.HoveredBox?.Box?.CanFit( position, size, item ) ?? false; 
		if ( fit ) return true;

		var reference = Container.HoveredBox?.Box?.GetReferenceAt( Container.AbsolutePosition, item );
		if ( reference is null ) return false; 

		if ( item.Stackable && reference.Stackable )
		{
			state.merged = reference.PrefabSource == item.PrefabSource
						&& reference.Amount < reference.MaxStack;

			return state.merged;
		}

		var container = reference.Inventory;
		state.inserted = container.IsValid() 
					  && container.TryFindSpace( item.AbsoluteSize, out var result, ( collection ) => collection.PassesFilter( item ) );

		return state.inserted;
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			CanFit,
			Container.HoveredPosition,
			DragItemPanel.Instance?.Rotated,
			DragItemPanel.Instance,
			Container?.HoveredBox == Box
		);
}
