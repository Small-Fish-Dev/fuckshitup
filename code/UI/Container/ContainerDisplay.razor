@namespace FUCKSHIT.UI
@inherits Panel

@if ( !Container.IsValid() )
	return;

<root>
	@foreach ( var slotCollection in Container.SlotCollections )
	{
		if ( slotCollection is null )
			continue;

		<SlotCollectionDisplay Container=@this SlotCollection=@slotCollection />
	}
</root>

@code {
	private const float GRID_SIZE = SlotCollectionDisplay.GRID_SIZE;

	public Container Container { get; set; }

	public SlotCollection HoveredCollection { get; set; }
	public ContainerBox HoveredBox { get; set; }
	public Vector2Int HoveredPosition { get; set; }
	public Vector2Int AbsolutePosition { get; set; }

	public override void Tick()
	{
		base.Tick();

		if ( HoveredBox is null )
			return;

		var offset = Vector2Int.Zero;
		var dragPanel = DragItemPanel.Instance;
		if ( dragPanel is not null )
		{
			var localPosition = dragPanel.LocalPosition * dragPanel.Box.Rect.Size / (GRID_SIZE * ScaleToScreen);
			offset = new Vector2Int( (int)localPosition.x, (int)localPosition.y );
		}

		var pos = HoveredBox.MousePosition;
		pos /= GRID_SIZE * ScaleToScreen;

		AbsolutePosition = new Vector2Int( (int)pos.x, (int)pos.y );
		HoveredPosition = AbsolutePosition - offset;
	}

	public void OnDropped( Item item, bool rotated, object source )
	{
		if ( !item.IsValid() )
			return;

		var collectionSource = HoveredCollection?.Source;
		if ( collectionSource == item ) return;

		var inserting = false;
		var destination = (
			Container: Container,
			Box: HoveredBox?.Box,
			Collection: HoveredCollection, 
			Position: HoveredPosition,
			Rotate: rotated
		);
		
		var reference = destination.Box?.GetReferenceAt( AbsolutePosition, item );

		var inventory = reference?.Inventory;
		if ( inventory.IsValid() && inventory.TryFindSpace( item.AbsoluteSize, out var result, ( collection ) => collection.PassesFilter( item ) ) )
		{
			inserting = true;

			destination = (
				Container: inventory, 
				Box: result.Box, 
				Collection: result.Collection, 
				Position: result.Position, 
				Rotate: result.Rotate
			);
		}

		if ( source is Container from )
		{
			var merge = !inserting && reference.IsValid() && item.Stackable && reference.Stackable 
				? reference 
				: null;

			if ( inserting || (destination.Collection?.PassesFilter( item ) ?? true) )
				from.TryTake( destination.Container, item, destination.Box, destination.Position, destination.Rotate, merge );

			return;
		}

		if ( source is Character character )
		{
			if ( destination.Box is null ) return;
			if ( !inserting && !destination.Box.CanFit( destination.Position, item.GetSize( rotated ), item ) )
				return;

			character.TryUnequip( item );

			item.Rotated = destination.Rotate;
			destination.Box.StoreReference( destination.Position, item );
			item.SetContainer( destination.Container );
		}
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			Container.IsValid(),
			Container?.SlotCollections?.HashCombine( slotCollection => slotCollection?.GetHashCode() ?? 0 )
		);
}
