@namespace FUCKSHIT.UI
@inherits Panel

@if ( !Container.IsValid() )
	return;

<root>
	@foreach ( var slotCollection in Container.SlotCollections )
	{
		if ( slotCollection is null )
			continue;

		<SlotCollectionDisplay Container=@this SlotCollection=@slotCollection />
	}
</root>

@code {
	private const float GRID_SIZE = SlotCollectionDisplay.GRID_SIZE;

	public Container Container { get; set; }

	public SlotCollection HoveredCollection { get; set; }
	public ContainerBox HoveredBox { get; set; }
	public Vector2Int HoveredPosition { get; set; }
	public Vector2Int AbsolutePosition { get; set; }

	public override void Tick()
	{
		base.Tick();

		if ( HoveredBox is null )
			return;

		var offset = Vector2Int.Zero;
		var dragPanel = DragItemPanel.Instance;
		if ( dragPanel is not null )
		{
			var localPosition = dragPanel.LocalPosition * dragPanel.Box.Rect.Size / GRID_SIZE * ScaleToScreen;
			offset = new Vector2Int( (int)localPosition.x, (int)localPosition.y );
		}

		var pos = HoveredBox.MousePosition;
		pos /= GRID_SIZE * ScaleToScreen;

		AbsolutePosition = new Vector2Int( (int)pos.x, (int)pos.y );
		HoveredPosition = AbsolutePosition - offset;
	}

	public void OnDropped( Item item, bool rotated, object source )
	{
		if ( !item.IsValid() )
			return;

		var box = HoveredBox?.Box;
		var pos = HoveredPosition;

		var collectionSource = HoveredCollection?.Source;
		if ( collectionSource == item ) return;

		if ( source is Container from )
		{
			var merge = item.Stackable 
				 ? box?.GetReferenceAt( AbsolutePosition, item )
				 : null;

			if ( HoveredCollection?.PassesFilter( item ) ?? true )
				from.TryTake( Container, item, box, pos, rotated, merge );

			return;
		}

		if ( source is Character character )
		{
			if ( box is null ) return;
			if ( !box.CanFit( pos, item.GetSize( rotated ), item ) )
				return;

			character.TryUnequip( item );

			item.Rotated = rotated;
			box.StoreReference( pos, item );
			item.SetContainer( Container );
		}
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			Container.IsValid(),
			Container?.SlotCollections?.HashCombine( slotCollection => slotCollection?.GetHashCode() ?? 0 )
		);
}
