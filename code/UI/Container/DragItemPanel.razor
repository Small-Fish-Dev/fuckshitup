@namespace FUCKSHIT.UI
@inherits ItemPanel

<root class="@(Valid ? "visible" : "")" style="background-image-tint: @(RgbaColor);">
	@if ( Valid )
	{
		<div class="background" />

		<div class="container">
			<div class="content">
				@{
					var texture = IconManager.Request( Item, Item.AbsoluteSize.x, Item.AbsoluteSize.y );

					<TexturePanel
						Texture=@texture
						style="transform: @(Rotated && !Static ? "rotate(90deg)" : "");
							   @(!Static 
								? $"width: {Item.AbsoluteSize.x * GRID_SIZE * ICON_SCALE}px; height: {Item.AbsoluteSize.y * GRID_SIZE * ICON_SCALE}px;"
								: "")"
					/>
				}
			</div>

			<p class="name text">@Item.Name</p>

			@if ( Item.Stackable )
			{
				<p class="amount text">@Item.Amount</p>
			}
		</div>
	}
</root>


@code {
	public static DragItemPanel Instance { get; private set; }

	public object Source { get; set; }
	public Vector2 LocalPosition { get; set; }
	public bool Rotated { get; set; }
	public Vector2Int Size => Item.GetSize( Rotated );

	public bool FromContainer => Source is Container;
	public bool FromEquipped => Source is Character;

	public static void Reset() => Instance = null;

	public override void Tick()
	{
		if ( !Valid )
		{
			Delete();
			Instance = null;
			return;
		}

		if ( Input.Pressed( InputAction.RELOAD ) )
		{
			Rotated = !Rotated;
			if ( Size.x != Size.y ) LocalPosition = new Vector2( LocalPosition.y, LocalPosition.x );
		}

		UpdateTransform( Box.Rect );
	}

	private void UpdateTransform( Rect rect )
	{
		if ( !Item.IsValid() ) return;

		var pos = Mouse.Position - LocalPosition * rect.Size;
		pos /= Screen.Size;

		Style.Left = Length.Fraction( pos.x );
		Style.Top = Length.Fraction( pos.y );

		Style.Width = Size.x * GRID_SIZE;
		Style.Height = Size.y * GRID_SIZE;
	}

	public static void TryBegin( ItemPanel panel, object source, Vector2 localPosition )
	{
		if ( DragItemPanel.Instance is not null )
			return;

		if ( panel is null ) 
			return;

		var item = panel.Item;
		if ( !item.IsValid() )
			return;

		Instance = new() 
		{
			Item = item,
			Rotated = item.Rotated,
			Source = source,
			LocalPosition = localPosition,
			Parent = UIComponent.Instance?.Panel
		};

		Instance.UpdateTransform( panel.Box.Rect );
	}

	public static void TryStop( ItemPanel panel, Action<Item, bool, object> callback )
	{
		if ( DragItemPanel.Instance is null )
			return;

		if ( panel is null ) 
			return;

		callback?.Invoke( Instance.Item, Instance.Rotated, Instance.Source );

		Instance?.Delete();
		Instance = null;
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			Item.IsValid(),
			Rotated,
			Item?.Amount,
			(Item as IIconGenerator)?.CreateIconHash()
		);
}
