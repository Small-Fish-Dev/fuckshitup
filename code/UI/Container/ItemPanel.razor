@namespace FUCKSHIT.UI
@inherits Panel

<root class="@(Valid || Static ? "visible" : "") @(IsBeingDragged && !Static ? "dragged" : "")" style="background-image-tint: @(RgbaColor);">
	@if ( Valid )
	{
		<div class="background" />

		<div class="container">
			<div class="content">
				@{
					var texture = IconManager.Request( Item, Item.AbsoluteSize.x, Item.AbsoluteSize.y );

					<TexturePanel
						Texture=@texture
						style="transform: @(Item.Rotated && !Static ? "rotate(90deg)" : "");
							   @(!Static 
								? $"width: {Item.AbsoluteSize.x * GRID_SIZE * ICON_SCALE}px; height: {Item.AbsoluteSize.y * GRID_SIZE * ICON_SCALE}px;"
								: "")"
					/>
				}
			</div>

			<p class="name">@Item.Name</p>
		</div>
	}
</root>

@code {
	protected const float GRID_SIZE = SlotCollectionDisplay.GRID_SIZE;
	public const float ICON_SCALE = 0.75f;

	public Item Item { get; set; }
	public bool Static { get; set; }
	public ContainerDisplay Container { get; set; }

	private bool IsBeingDragged => DragItemPanel.Instance is not null && DragItemPanel.Instance.Item == Item;
	protected bool Valid => Item.IsValid() && !Item.IsProxy;
	protected string RgbaColor => Valid ? Item.Rarity.GetColor().WithAlpha( 0.25f ).Rgba : "#FFFFFF";

	protected override void OnMouseDown( MousePanelEvent e )
	{
		if ( e.MouseButton is not MouseButtons.Left )
			return;

		DragItemPanel.TryBegin( this );
	}

	protected override void OnMouseUp( MousePanelEvent e )
	{
		if ( e.MouseButton is not MouseButtons.Left )
			return;

		DragItemPanel.TryStop( this, (item, rotated) => Container.Released( item, rotated ) );
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			Item.IsValid(),
			Item?.Rotated,
			IsBeingDragged,
			(Item as IIconGenerator)?.CreateIconHash()
		);
}
