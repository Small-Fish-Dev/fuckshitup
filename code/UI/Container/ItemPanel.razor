@namespace FUCKSHIT.UI
@inherits Panel

<root class="@(Valid || Static ? "visible" : "") @(IsBeingDragged ? "dragged" : "")" style="background-image-tint: @(RgbaColor);">
	@if ( Valid )
	{
		<div class="background" />

		<div class="container">
			<div class="content">
				@{
					var texture = IconManager.Request( Item, Item.AbsoluteSize.x, Item.AbsoluteSize.y );

					<TexturePanel
						Texture=@texture
						style="transform: @(Item.Rotated && !Static ? "rotate(90deg)" : "");
							   @(!Static 
								? $"width: {Item.AbsoluteSize.x * GRID_SIZE * ICON_SCALE}px; height: {Item.AbsoluteSize.y * GRID_SIZE * ICON_SCALE}px;"
								: "")"
					/>
				}
			</div>

			@if ( !HideInfo )
			{
				<p class="name text">@Item.Name</p>

				@if ( Item.Stackable )
				{
					<p class="amount text">@Item.Amount</p>
				}
			}
		</div>
	}
</root>

@code {
	private const float DOUBLE_CLICK_TIME = 0.25f;
	private const float DOUBLE_CLICK_DISTANCE = 5f;

	protected const float GRID_SIZE = SlotCollectionDisplay.GRID_SIZE;
	public const float ICON_SCALE = 0.75f;

	public Item Item { get; set; }
	public bool Static { get; set; }
	public object Source { get; set; }
	public ContainerDisplay Container { get; set; }
	public bool HideInfo { get; set; }

	private TimeSince _lastClicked;
	private Vector2 _clickPosition;
	private Vector2 _localPosition;
	private bool _down;

	private bool IsBeingDragged => DragItemPanel.Instance is not null && DragItemPanel.Instance.Item == Item;
	protected bool Valid => Item.IsValid() && !Item.IsProxy;
	protected string RgbaColor => Valid ? Item.Rarity.GetColor().WithAlpha( 0.25f ).Rgba : "#00000000";

	private bool ShouldDrag =>
		   (_lastClicked >= DOUBLE_CLICK_TIME 
		|| _clickPosition.Distance( Mouse.Position ) > DOUBLE_CLICK_DISTANCE) && _down;

	protected override void OnMouseDown( MousePanelEvent e )
	{
		if ( e.MouseButton is not MouseButtons.Left )
			return;

		_down = true;

		if ( _lastClicked < DOUBLE_CLICK_TIME )
		{
			
		}

		_lastClicked = 0f;
		_clickPosition = Mouse.Position;
		_localPosition = MousePosition / Box.Rect.Size;
	}

	protected override void OnMouseUp( MousePanelEvent e )
	{
		if ( e.MouseButton is not MouseButtons.Left )
			return;
			
		_down = false;
			
		if ( DragDropTarget.Current is not null )
		{
			DragItemPanel.TryStop( this, DragDropTarget.Current.OnDropped );
			return;
		}

		DragItemPanel.TryStop( this, (item, rotated, source) => Container?.OnDropped( item, rotated, source ) );
	}

	public override void Tick()
	{
		if ( ShouldDrag && !IsBeingDragged ) 
			DragItemPanel.TryBegin( this, Source, _localPosition );
	}

	protected override int BuildHash()
		=> HashCode.Combine(
			Item.IsValid(),
			Item?.Rotated,
			Item?.Amount,
			IsBeingDragged,
			(Item as IIconGenerator)?.CreateIconHash()
		);
}
