@namespace FUCKSHIT.UI
@inherits Panel

@if ( SlotCollection is null )
	return;

<root class=@(Source.IsValid() ? "has-source" : "")>
	<div class="title header-bg">@Name</div>

	<div class="container">

		@if ( Source.IsValid() )
		{
			<ItemPanel 
				Item=@Source 
				Static=@true 
				Source=@Character
				Container=@Container
			/>
		}

		<div class="boxes">
			@{
				var totalY = 0f;
				var totalX = 0f;
				var rowTallest = 0f;
				var boxCount = Boxes.Count;
				var previous = default( SlotCollection.Box );

				for ( int i = 0; i < boxCount; i++ )
				{
					var box = Boxes.ElementAtOrDefault( i );
					if ( box is null )
						continue;

					@* Get current position of our box. *@
					var top = totalY + box.Margin.y;
					var left = box.SameLine && previous is not null
						? previous.Size.x * GRID_SIZE + GAP
						: 0f;
					left += box.Margin.x + totalX;
					totalX = left;

					@* SlotCollection box.. *@
					<ContainerBox 
						Box=@box 
						Container=@Container
						SlotCollection=@SlotCollection
						style="width: @(box.Size.x * GRID_SIZE + 2)px; 
							   height: @(box.Size.y * GRID_SIZE + 2)px;
							   top: @(top)px; left: @(left)px;"
					/>

					@* Is our item the tallest? *@
					var height = box.Size.y * GRID_SIZE;
					if ( rowTallest < height )
						rowTallest = height;

					@* Do we go to the next row? *@
					var next = Boxes.ElementAtOrDefault( i + 1 );
					if ( next is not null && !next.SameLine )
					{
						totalY += rowTallest + GAP;
						totalX = 0f;
						rowTallest = 0f;
					}

					previous = box;
				}

				<div style="padding-bottom: @(totalY + rowTallest + COLLECTION_GAP)px;" />
			}
		</div>
	</div>
</root>

@code {
	public const float GRID_SIZE = 50;
	public const float COLLECTION_GAP = 20;
	public const float GAP = 3;

	public ContainerDisplay Container { get; set; }
	public SlotCollection SlotCollection { get; set; }
	
	private Character Character => Character.Local;
	private IReadOnlyCollection<SlotCollection.Box> Boxes => SlotCollection.Boxes;
	
	private string Name => Source.IsValid() 
		? Source.Slot.ToString()
		: SlotCollection.Name;

	private Item Source => SlotCollection is not null
		? SlotCollection.Source
		: null;

	protected override int BuildHash()
		=> HashCode.Combine(
			SlotCollection is null
		);
}
